priority 1

global !p
def elixir_module_name(inp):
	newpath = path.split("/lib/");
	newpath = newpath[1] if len(newpath) == 2 else newpath[0]
	modules = newpath.split("/")
	reformatted_modules = [ "".join([name.capitalize() for name in module.split(".ex")[0].split("_")]) for module in modules]
	return ".".join(reformatted_modules)
endglobal

snippet defmo "defmodule"
defmodule ${1:`!p snip.rv = elixir_module_name(path)`} do
  $2
end
endsnippet

snippet defcontroller "defcontroller"
defmodule ${1:`substitute(substitute(substitute(expand('%:r'), '^[^/]\+/\(.*\)', '\1', ''), '\(_\|/\|^\)\([^/_]\+\)', '\u\2.\3', 'g'), '.$', '', '')`} do
  use $2.Web, :controller

  $3
end
endsnippet

snippet def "def"
def $1($2) do
  $0
end
endsnippet

snippet def:
def $1($2), do: $0
endsnippet

snippet defp
defp $1($2) do
  $0
end
endsnippet

snippet defp:
defp $1($2), do: $0
endsnippet

snippet deftest
test "$1: $2" do
  $0
end
endsnippet

snippet defgenserver
defmodule ${1:`!p snip.rv = elixir_module_name(path)`} do
  use GenServer

  def start_link${2:()} do
    GenServer.start_link(__MODULE__, ${3:[]})
  end

  $0
end
endsnippet

snippet defsupervisor
defmodule ${1:`!p snip.rv = elixir_module_name(path)`} do
  use Supervisor

  def start_link do
    Supervisor.start_link(__MODULE__, [])
  end

  def init([]) do
    children = [
		  $0
    ]

    supervise(children, strategy: :one_for_one)
  end
end
endsnippet

snippet supervisorworker
worker(${1:Module}, [${2:params}])$0
endsnippet

snippet supervisorsupervisor
supervisor(${1:Module}, [${2:params}])$0
endsnippet

snippet workflowdoc
@moduledoc """
${1:general description}

## Input

### Payload

- \`"${2:parameter name}"\`: ${3:(**required**) A description}

### Meta

- \`:${4:parameter name}\`: ${5:(**required**) A description}

## Output

### Success

It returns a \`:ok\` tuple with ${6:return type}

### Error

#### ${7:ModuleError}

${7:description}
"""
endsnippet
